#!/usr/bin/python

from coffeecrispt import *
import argparse
import os
import datetime, time
import sys
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

def compile_once(input_location, output_location, minify):
  if output_location:
    print "[%s] Attempting compilation ..." % str(datetime.datetime.now()),
  try:
    output = compile_project(input_location or os.getcwd(), minify)
  except (CompileError, DependencyError) as e:
    print >> sys.stderr, "Error: %s" % e.message
  else:
    if output_location:
      try:
        with open(output_location, "w") as f:
          f.write(output)
      except IOError as e:
        print "Error: %s" % e.message
      else:
        print "Success! At location %s" % output_location
    else:
      print output


class CompileHandler(FileSystemEventHandler):
  def __init__(self, input_location, output_location, minify):
    self.input_location = input_location
    self.output_location = output_location
    self.minify = minify

  def on_any_event(self, event):
    _t = event.src_path.rsplit(".", 1)
    if len(_t) > 1 and _t[1] == "coffee":
      compile_once(self.input_location, self.output_location, self.minify)

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument("-c", "--compile", action="store_true", help="Compile once and exits.")
  parser.add_argument("-w", "--watch", action="store_true", help="Repeatedly compiles and watches for changes.")
  parser.add_argument("-m", "--minify", action="store_true", help="Minifies the javascript.")
  parser.add_argument("-i", "--input", help="The location of the input folder, or else it will be .")
  parser.add_argument("-o", "--output", help="The location of the output script, concatenated")
  args = parser.parse_args()
  if args.compile or (not args.compile and not args.watch):
    compile_once(args.input, args.output, args.minify)
  elif args.watch:
    if not args.output:
      print >> sys.stderr, "Error: Yeah... you can't just watch without an output file."
      sys.exit(1)
    handler = CompileHandler(args.input, args.output, args.minify)
    observer = Observer()
    observer.schedule(handler, path=".", recursive=True)
    compile_once(args.input, args.output, args.minify)
    observer.start()
    try:
      while True:
        time.sleep(1)
    except KeyboardInterrupt:
      observer.stop()
    observer.join()


