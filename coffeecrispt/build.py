import subprocess
import re
from coffeecrispt import depmanager

from slimit import minify as jsminify

class CompileError(Exception): pass


def compile_to_js(path):
  with open(path) as f:
    src = f.read()

  process = subprocess.Popen("echo %s | coffee -scb" % repr(src), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  success = not bool(process.wait())
  if success:
    return True, process.communicate()[0].replace("// Generated by CoffeeScript 1.3.3\n", "") # TODO: Make this version independent
  else:
    return False, process.communicate()[1].split("\n")[0] + " for file %s" % path

def compile_project(basepath, minify=False):
  order, modulepaths = depmanager.get_all_modules_sorted(basepath)

  modules = []

  c = ""

  for module_name in order:
    ms = module_name.split(".")
    while len(modules) < len(ms):
      modules.append([])

    if len(ms) > 1:
      mn = ms[0]
      for i in xrange(1, len(ms)):
        mn += "['%s']" % ms[i]
      modules[len(ms) - 1].append(mn)
    else:
      modules[0].append(module_name)

    c += "// === %s ===\n\n" % module_name
    success, payload = compile_to_js(modulepaths[module_name])
    if success:
      c += payload
    else:
      raise CompileError(payload)

    c += "\n\n"
  required_obj_wraps = "\n".join(["var %s = {};" % mn for mn in modules.pop(0)]) + "\n"
  required_obj_wraps += "\n".join(["%s = {};" % mn for level in modules for mn in level]) # TODO: To be honest, this needs to using prefixes instead of obj lookups

  output = "// Generated by CoffeeScript and Coffeecrispt\n(function() {\n\n//=== required object wraps ===\n\n" + required_obj_wraps + "\n" + c + "}).call(this);" # it's not pretty, but it will work. Raises the question: When is my code ever pretty?
  if minify:
    return jsminify(output, mangle=True, mangle_toplevel=True)
  else:
    return output
